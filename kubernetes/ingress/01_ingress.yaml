apiVersion: v1
kind: Pod
metadata:
  name: first-app
  labels:
    name: first-app
spec:
  containers:
  - name: first-app
    image: nginx:latest
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    ports:
      - containerPort: 80
  imagePullSecrets:
  - name: docker-pull-secret
---
apiVersion: v1
kind: Pod
metadata:
  name: second-app
  labels:
    name: second-app
spec:
  containers:
  - name: second-app
    image: httpd:latest
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
    ports:
      - containerPort: 80
  imagePullSecrets:
  - name: docker-pull-secret
---
apiVersion: v1
kind: Service
metadata:
  name: first-service
spec:
  selector:
    app: first-app
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: second-service
spec:
  selector:
    app: second-app
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myingress
  labels:
    name: myingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/"
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: "example.com"
    http:
      paths:
      - pathType: Prefix
        path: "/first"
        backend:
          service:
            name: first-service
            port: 
              number: 80
      - pathType: Prefix
        path: "/second"
        backend:
          service:
            name: second-service
            port: 
              number: 80


# 인그레스(ingress)

# 클러스터 외부에서 내부로의 접근 요청을 어떻게 처리할지 정의해 둔 규칙
# 애플리케이션 수준의 접근 요청 처리 방법을 제공하며, URI 주소에 따라
# 내부 백엔드 서비스의 연결을 제어하는 규칙을 정의할 수 있다.
# 이 외에도 SSL 인증 처리 및 도메인 기반 가상 호스팅도 처리할 수 있다.

# 인그레스를 사용하기 위해 인그레스 컨트롤러가 필요하여 인그레스 컨트롤러에
# 의해 인그레스에 정의된 규칙이 제어된다.
# 대표적인 인그레스 컨트롤러는 ingress-nginx 가 있다.

# git clone https://github.com/kubernetes/ingress-nginx.git
# kubectl apply -f ingress-nginx/deploy/static/provider/baremetal